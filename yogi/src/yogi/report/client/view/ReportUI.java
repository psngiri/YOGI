package yogi.report.client.view;

import java.awt.Component;
import java.awt.event.KeyEvent;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

import org.jdesktop.swingx.autocomplete.ComboBoxCellEditor;

import yogi.remote.CommandException;
import yogi.remote.client.app.MultiServerCommandExecutor;
import yogi.report.client.ReportViewer;
import yogi.report.client.model.ComboBoxModel;
import yogi.report.client.model.FilterTableModel;
import yogi.report.client.model.FilterTableRow;
import yogi.report.client.model.GroupFilterTableModel;
import yogi.report.client.model.GroupFilterTableRow;
import yogi.report.client.model.ListModel;
import yogi.report.client.model.SelectedColumnsTableModel;
import yogi.report.client.model.SelectedColumnsTableRow;
import yogi.report.server.Column;
import yogi.report.server.Filter;
import yogi.report.server.Query;
import yogi.report.server.command.GetReportConfigurationCommand;
import yogi.report.server.command.GetReportsCommand;
import yogi.report.server.config.ColumnConfig;
import yogi.report.server.config.ConditionConfig;
import yogi.report.server.config.FunctionConfig;
import yogi.report.server.config.ReportConfig;

/**
 *
 * @author 909896
 */
public class ReportUI extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	private static ListModel<String> reportnameListModel = new ListModel<String>();
	private String userId= null;
	private static ListModel<ColumnConfig<?,?>> columnsListModel = new ListModel<ColumnConfig<?,?>>(){
		private static final long serialVersionUID = -5104257411923731399L;
		@Override
		public Object getElementAt(int index) {
			return getItemAt(index).getName();
		}
	};
	private static SelectedColumnsTableModel selectedColumnsTableModel = new SelectedColumnsTableModel();
	private static FilterTableModel filterTableModel = new FilterTableModel();
	private static GroupFilterTableModel groupFilterTableModel = new GroupFilterTableModel();
	final JComboBox filterColumnConfigComboBox = new JComboBox();
	final ComboBoxModel<ColumnConfig<?,?>> filterColumnConfigComboBoxModel = new ComboBoxModel<ColumnConfig<?,?>>();
	final JComboBox groupFilterColumnConfigComboBox = new JComboBox();
	ComboBoxModel<ColumnConfig<?,?>> groupFilterColumnConfigComboBoxModel = new ComboBoxModel<ColumnConfig<?,?>>();
	final JComboBox groupLevelConfigComboBox = new JComboBox();
	final ComboBoxModel<ColumnConfig<?,?>> groupLevelComboBoxModel = new ComboBoxModel<ColumnConfig<?,?>>();
	private static List<String> reportNames;
    private static ComboBoxModel<Object> subComboBoxModel = new ComboBoxModel<Object>();
   
    ReportConfig<?> reportConfig;

	protected List<Object> getObjects(String reportType)
	{
		return new ArrayList<Object>();
	}
	protected String getObject(Object object) {
		return object.toString();
	}
        
    /**
     * Creates new form ReportUI
     */
    public ReportUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        verticalSplitPane = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        columnsList = new javax.swing.JList();
        addSelectedColumnButton = new javax.swing.JButton();
        removeSelectedColumnButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        selectedColumnsTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        selectReportLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportnameList = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        filterPanel = new javax.swing.JPanel();
        filterConditionLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        filterTable = new javax.swing.JTable();
        filterAddButton = new javax.swing.JButton();
        filterRemoveButton = new javax.swing.JButton();
        filterPatternErrorIndicatorLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        groupFilterConditionLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        groupFilterTable = new javax.swing.JTable();
        groupFilterAddButton = new javax.swing.JButton();
        groupFilterRemoveButton = new javax.swing.JButton();
        groupFilterPatternErrorIndicatorLabel = new javax.swing.JLabel();
        subPanel = new javax.swing.JPanel();
        selectSubLabel = new javax.swing.JLabel();
        subComboBox = new javax.swing.JComboBox();
        generateReportButton = new javax.swing.JButton();
        saveQueryButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Report Query Builder");

        verticalSplitPane.setDividerLocation(290);
        verticalSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane1.setDividerLocation(200);

        jSplitPane2.setDividerLocation(200);

        jLabel1.setText("Select Columns :");

        columnsList.setModel(columnsListModel
        );
        columnsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                columnsList_DoubleClick(evt);
            }
        });
        jScrollPane3.setViewportView(columnsList);

        addSelectedColumnButton.setText(">");
        addSelectedColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSelectedColumnButtonActionPerformed(evt);
            }
        });

        removeSelectedColumnButton.setText("<");
        removeSelectedColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedColumnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 100, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addSelectedColumnButton)
                            .addComponent(removeSelectedColumnButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(addSelectedColumnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeSelectedColumnButton)
                        .addGap(0, 103, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(jPanel3);

        jLabel2.setText("Report Columns :");

        selectedColumnsTable.setModel(selectedColumnsTableModel);
        selectedColumnsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                selectedColumnsTableKeyPressedEvent(evt);
            }
        });
        jScrollPane4.setViewportView(selectedColumnsTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane2.setRightComponent(jPanel4);

        jSplitPane1.setRightComponent(jSplitPane2);

        selectReportLabel.setText("Select Report :");

        reportnameList.setModel(reportnameListModel);
        reportnameList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportnameList_mouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(reportnameList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(selectReportLabel)
                        .addGap(0, 107, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectReportLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel2);

        verticalSplitPane.setTopComponent(jSplitPane1);

        filterConditionLabel.setText("Select the Filter Condition :");

        filterTable.setModel(filterTableModel);
        filterTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterTableKeyPressedEvent(evt);
            }
        });
        jScrollPane5.setViewportView(filterTable);

        filterAddButton.setText("Add");
        filterAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterAddButtonActionPerformed(evt);
            }
        });

        filterRemoveButton.setText("Remove");
        filterRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterRemoveButtonActionPerformed(evt);
            }
        });

        filterPatternErrorIndicatorLabel.setForeground(new java.awt.Color(255, 0, 0));
        filterPatternErrorIndicatorLabel.setText("");
        filterPatternErrorIndicatorLabel.setToolTipText("FilterPattern tool tip text ");

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addComponent(filterConditionLabel)
                        .addGap(100, 100, 100)
                        .addComponent(filterPatternErrorIndicatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filterRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filterAddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterConditionLabel)
                            .addComponent(filterPatternErrorIndicatorLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGap(0, 168, Short.MAX_VALUE)
                        .addComponent(filterAddButton)
                        .addGap(6, 6, 6)
                        .addComponent(filterRemoveButton)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Filter", filterPanel);

        groupFilterConditionLabel.setText("Select the Group Filter Condition :");

        groupFilterTable.setModel(groupFilterTableModel);
        groupFilterTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                groupFilterTableKeyPressedEvent(evt);
            }
        });
        jScrollPane6.setViewportView(groupFilterTable);

        groupFilterAddButton.setText("Add");
        groupFilterAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupFilterAddButtonActionPerformed(evt);
            }
        });

        groupFilterRemoveButton.setText("Remove");
        groupFilterRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupFilterRemoveButtonActionPerformed(evt);
            }
        });

        groupFilterPatternErrorIndicatorLabel.setForeground(new java.awt.Color(255, 0, 0));
        groupFilterPatternErrorIndicatorLabel.setText("");
        groupFilterPatternErrorIndicatorLabel.setToolTipText("GroupFilterPattern tool tip text ");
        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(groupFilterConditionLabel)
                        .addGap(68, 68, 68)
                        .addComponent(groupFilterPatternErrorIndicatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(groupFilterRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(groupFilterAddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(groupFilterConditionLabel)
                            .addComponent(groupFilterPatternErrorIndicatorLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 168, Short.MAX_VALUE)
                        .addComponent(groupFilterAddButton)
                        .addGap(6, 6, 6)
                        .addComponent(groupFilterRemoveButton)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Group Filter", jPanel6);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        verticalSplitPane.setRightComponent(jPanel5);

        selectSubLabel.setText("Select Sub:");

        subComboBox.setModel(subComboBoxModel);

        generateReportButton.setText("Generate Report");
        generateReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportButtonActionPerformed(evt);
            }
        });

        saveQueryButton.setText("Save Query");
        saveQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveQueryButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subPanelLayout = new javax.swing.GroupLayout(subPanel);
        subPanel.setLayout(subPanelLayout);
        subPanelLayout.setHorizontalGroup(
            subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectSubLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(50, 50, 50)
                .addComponent(generateReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addGap(115, 115, 115))
        );
        subPanelLayout.setVerticalGroup(
            subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectSubLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subComboBox)
                    .addComponent(generateReportButton)
                    .addComponent(saveQueryButton)
                    .addComponent(closeButton))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(verticalSplitPane)
                    .addComponent(subPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(verticalSplitPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();}// </editor-fold>
    
    private void selectedColumnsTableKeyPressedEvent(java.awt.event.KeyEvent evt) {
    	if(KeyEvent.VK_DELETE==evt.getKeyCode()){
    		removeSelectedColumnButtonActionPerformed(null);
    	}
    }

    private void filterTableKeyPressedEvent(java.awt.event.KeyEvent evt) {
    	if(KeyEvent.VK_DELETE==evt.getKeyCode()){
    		filterRemoveButtonActionPerformed(null);
    	}
    }

    private void groupFilterTableKeyPressedEvent(java.awt.event.KeyEvent evt) {
    	if(KeyEvent.VK_DELETE==evt.getKeyCode()){
    		groupFilterRemoveButtonActionPerformed(null);
    	}
    }

    public TableModelListener selectedColumnsTableModelListener() {
        return new TableModelListener(){
            public void tableChanged(TableModelEvent e)  
            {  
                if (e.getType() == TableModelEvent.UPDATE)  
                {  
                    int row = e.getFirstRow();  
                    int column = e.getColumn();  
                    if (column == 2 && e.getSource().equals(selectedColumnsTableModel))  
                    {  
                    		SelectedColumnsTableRow currentRow = selectedColumnsTableModel.getRow(row);
	                        if(currentRow.isGroupBy()){
	                        	groupLevelComboBoxModel.add(currentRow.getColumnConfig());
	                       }else{
	                        	groupLevelComboBoxModel.remove(currentRow.getColumnConfig());
	                        }
	                }  
                }  
            }  
        };
    }

    
    public TableModelListener filterTableModelListener() {
        return new TableModelListener(){
            public void tableChanged(TableModelEvent e)  
            {  
                if (e.getType() == TableModelEvent.UPDATE)  
                {  
                    int row = e.getFirstRow();  
                    int column = e.getColumn();  
                    if (column == 2 && e.getSource().equals(filterTableModel))  
                    {  
                    	
	                        FilterTableRow currentRow = filterTableModel.getRow(row);
	                        if(currentRow.getColumnConfig()!=null&&currentRow.getConditionConfig()!=null)
							if(!(validatePattern(currentRow.getConditionConfig().getValidator().getRegEx(),currentRow.getValue()))){
								String validationErrorMessage=currentRow.getColumnConfig().toString()+" "+ currentRow.getConditionConfig().toString() + " Condition " +
										currentRow.getValue() + " " +currentRow.getConditionConfig().getValidator().getMessage();
								filterPatternErrorIndicatorLabel.setText(validationErrorMessage);
								filterPatternErrorIndicatorLabel.setToolTipText(validationErrorMessage);
							}else filterPatternErrorIndicatorLabel.setText("");
							
                    	
                    }  
                }  
            }  
        };
    }

    public TableModelListener groupFilterTableModelListener() {
        return new TableModelListener(){
            public void tableChanged(TableModelEvent e)  
            {  
                if (e.getType() == TableModelEvent.UPDATE)  
                {  
                    int row = e.getFirstRow();  
                    int column = e.getColumn();  
                    if (column == 2 && e.getSource().equals(groupFilterTableModel))  
                    {  
                    	
	                        GroupFilterTableRow currentRow = groupFilterTableModel.getRow(row);
	                        if(currentRow.getColumnConfig()!=null&&currentRow.getConditionConfig()!=null)
							if(!(validatePattern(currentRow.getConditionConfig().getValidator().getRegEx(),currentRow.getValue()))){
								String validationErrorMessage=currentRow.getColumnConfig().toString()+" "+ currentRow.getConditionConfig().toString() + " Condition " +
										currentRow.getValue() + " " +currentRow.getConditionConfig().getValidator().getMessage();
								groupFilterPatternErrorIndicatorLabel.setText(validationErrorMessage);
								groupFilterPatternErrorIndicatorLabel.setToolTipText(validationErrorMessage);
							}else groupFilterPatternErrorIndicatorLabel.setText("");
							
                    	
                    }
                }  
         }  
        };
    }

    private void saveQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {    
    	//JOptionPane.showMessageDialog(this,"Feature available in future release!");
    }                                               

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
         System.exit(0);
    }                                           

   
    private void generateReportButtonActionPerformed(java.awt.event.ActionEvent evt) { 
    	String reportName = (String) reportnameList.getSelectedValue();
        List<Column> columns=new ArrayList<Column>();
        if(selectedColumnsTable.getCellEditor()!=null)selectedColumnsTable.getCellEditor().stopCellEditing();
        for(SelectedColumnsTableRow row:selectedColumnsTableModel.getRows()){
			String function;
			if(row.getFunctionConfig()==null)function="";
			else function=row.getFunctionConfig().toString();
			columns.add(new Column(row.getColumnConfig().toString(),row.getColumnConfig().toString(),function,row.isGroupBy(),row.getSortOrder(),row.getGroupSortOrder()));
		}
		List<Filter> filters=new ArrayList<Filter>();
		try{
			if(filterTable.getCellEditor()!=null)filterTable.getCellEditor().stopCellEditing();
	        	
			for(FilterTableRow row:filterTableModel.getRows()){
				if(!((row.getColumnConfig()==null)||(row.getConditionConfig()==null)||(row.getValue()==null)))
				{
					if(validatePattern(row.getConditionConfig().getValidator().getRegEx(),row.getValue())){
						Filter filter = new Filter(row.getColumnConfig().toString(), row.getConditionConfig().toString(),row.getValue(),row.getAlias()==null?"":row.getAlias());
						if(filter.isValid()) filters.add(filter);
					}else {
						JOptionPane.showMessageDialog(this,"Please Check: "+row.getColumnConfig().getName()+" "+row.getConditionConfig().getName()+" Condition "+row.getValue()+" Value" );
						throw new Exception("Please Check Filter Condition");
					}
				}
				
			}
			List<Filter> groupFilters=new ArrayList<Filter>();
			if(groupFilterTable.getCellEditor()!=null)groupFilterTable.getCellEditor().stopCellEditing();
	        for(GroupFilterTableRow row:groupFilterTableModel.getRows()){
				if(!((row.getColumnConfig()==null)||(row.getConditionConfig()==null)||(row.getValue()==null)||(row.getMarketLevelColumnConfig()==null)))
				{
					if(validatePattern(row.getConditionConfig().getValidator().getRegEx(),row.getValue())){
						Filter filter = new Filter(row.getColumnConfig().toString(), row.getConditionConfig().toString(),row.getValue(),row.getMarketLevelColumnConfig().toString());
						if(filter.isValid()) groupFilters.add(filter);
					}else {
						JOptionPane.showMessageDialog(this,"Please Check: "+row.getColumnConfig().getName()+" "+row.getConditionConfig().getName()+" Condition "+row.getValue()+" Value" );
						throw new Exception("Please Check Group Filter Condition");
					}
				}
			}
	        String serverType="DomesticPRE";
	        if(!reportName.contains("Domestic"))serverType="InternationalPRE";
			Query query = new Query(serverType,new String[]{getObject(subComboBox.getSelectedItem())}, reportName,columns,filters,groupFilters);
			new ReportViewer(query, userId, reportConfig.getType());
		}catch(NullPointerException e){
			e.printStackTrace();
		}
		catch(Exception e){
			JOptionPane.showMessageDialog(this, e.toString());
		}
	}
   
    private void reportnameList_mouseClicked(java.awt.event.MouseEvent evt) {
        
        filterTableModel.clear();
        groupFilterTableModel.clear();
        columnsListModel.removeAll();
        selectedColumnsTableModel.clear();
        filterColumnConfigComboBoxModel.removeAll();
        groupFilterColumnConfigComboBoxModel.removeAll();
        groupLevelComboBoxModel.removeAll();
        filterConditionLabel.setText("");
        groupFilterConditionLabel.setText("");
       
        final int selectedIndex = reportnameList.getSelectedIndex();
        List<Object> subObjects;

        try {
                String reportName = reportNames.get(selectedIndex);
                
                reportConfig=MultiServerCommandExecutor.get().execute(new GetReportConfigurationCommand(reportName,null));
                 //Get Subs list
                subObjects=getObjects(reportConfig.getType());
                subComboBoxModel.clear();
                subComboBoxModel.addAll(subObjects);
                List<ColumnConfig<?, ?>> columns = reportConfig.getColumns();
				columnsListModel.addAll(columns);
        } catch (CommandException ex) {
            ex.printStackTrace();
        }
    }

    private void columnsList_DoubleClick(java.awt.event.MouseEvent evt) {
        if (evt.getClickCount() == 2) 
			addSelectedColumnsToTable();
    }

    private void addSelectedColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {
       	addSelectedColumnsToTable();
    }
   
    private void addSelectedColumnsToTable() {
		int[] selectedIx = columnsList.getSelectedIndices();
		try {
			for (int i=0; i<selectedIx.length; i++) {
				Object selectedColumn = columnsList.getModel().getElementAt(selectedIx[i]);
				ColumnConfig<?, ?> column = reportConfig.getColumn(selectedColumn.toString());
					selectedColumnsTableModel.addRow(column);
					filterColumnConfigComboBoxModel.add(column);
					if(!(column.getFunctions().size()==0)) {
						groupFilterColumnConfigComboBoxModel.add(column);
						
					}
						
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
    
    private void removeSelectedColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	
        try{
        	
            int[] selectedRowIndices = selectedColumnsTable.getSelectedRows();
            int countRemoved = 0;
		    for (int selectedRowIndex : selectedRowIndices) {
		    	int removeIndex = selectedRowIndex - countRemoved++;
				for(FilterTableRow row: filterTableModel.getRows())
				{ 
					if(!(row.getColumnConfig()==null))
					if(((selectedColumnsTableModel).getValueAt(removeIndex, 0)).equals(row.getColumnConfig().toString())){
						filterTableModel.removeRow(row);
						
					}   
				}
				for(GroupFilterTableRow row: groupFilterTableModel.getRows())
				{ 
					if(!(row.getColumnConfig()==null))
					if(((selectedColumnsTableModel).getValueAt(removeIndex, 0)).equals(row.getColumnConfig().toString())){
						groupFilterTableModel.removeRow(row);
						
					}   
				}
			   filterColumnConfigComboBoxModel.setSelectedItem(null);
			   ColumnConfig<?, ?> columnConfig = selectedColumnsTableModel.getRow(removeIndex).getColumnConfig();
			   filterColumnConfigComboBoxModel.remove(columnConfig);
			   groupFilterColumnConfigComboBoxModel.setSelectedItem(null);
			   groupFilterColumnConfigComboBoxModel.remove(columnConfig);
			   if(selectedColumnsTableModel.getRow(removeIndex).isGroupBy()){
				   groupLevelComboBoxModel.setSelectedItem(null);
				   groupLevelComboBoxModel.remove(columnConfig);
			   }
			   selectedColumnsTableModel.remove(removeIndex);
			   //selectedColumnsTable.repaint();
		    }
         }catch (ConcurrentModificationException e) {
        	 JOptionPane.showMessageDialog(new JOptionPane(), "Removing filter condition on this column..");
        	 removeSelectedColumnButtonActionPerformed(null);
        	 filterTable.repaint();
         }catch (Exception e) {
             e.printStackTrace();
          }
    }

    private boolean validatePattern(String regex, String messageToken) {
		
        if (messageToken == null || messageToken.equals("")) {
             return false;
        }

        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(messageToken);
       
        if (matcher.find()) {
             return true;
        }

        return false;
    }
    
    private void filterAddButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	if(filterTable.getCellEditor()!=null)filterTable.getCellEditor().stopCellEditing();
 	   
    	//filterTableModel.getRow(filterTable.getRowCount()-1).getColumnConfig()!=null
        if((filterPatternErrorIndicatorLabel.getText()).equals("")){
   			ColumnConfig<?, ?> column = null;
   			filterTableModel.addRow(column);
   		}
   	}
    
    private void filterRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	if(filterTable.getCellEditor()!=null)filterTable.getCellEditor().stopCellEditing();
	   int[] selectedRowIndices = filterTable.getSelectedRows();
 		int countRemoved = 0;
 		filterPatternErrorIndicatorLabel.setText("");
 		for (int selectedRowIndex : selectedRowIndices) {
 			int removeIndex = selectedRowIndex - countRemoved++;
                 filterTableModel.remove(removeIndex);
 		}
 		//filterTable.repaint();
    }

    private void groupFilterAddButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	if(groupFilterTable.getCellEditor()!=null)groupFilterTable.getCellEditor().stopCellEditing();
    	//if(groupFilterTableModel.getRow(groupFilterTable.getRowCount()-1).getColumnConfig()!=null)
    	if((groupFilterPatternErrorIndicatorLabel.getText()).equals("")){
   			ColumnConfig<?, ?> column = null;
   			groupFilterTableModel.addRow(column);
//   			marketLevelComboBoxModel.clear();
			//conditionConfigComboBox.setSelectedItem(null);
//			for (SelectedColumnsTableRow selectedColumnsTableRow:selectedColumnsTableModel.getRows()){
//				if(selectedColumnsTableRow.isGroupBy()) marketLevelComboBoxModel.add(selectedColumnsTableRow.getColumnConfig());
//			}
//			for (FilterTableRow filterTableRow:filterTableModel.getRows()){
//				if(!filterTableRow.getAlias().isEmpty()) marketLevelComboBoxModel.add(filterTableRow.getColumnConfig());
//			}
   		}
    }
    
    private void groupFilterRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	if(groupFilterTable.getCellEditor()!=null)groupFilterTable.getCellEditor().stopCellEditing();
    	 int[] selectedRowIndices = groupFilterTable.getSelectedRows();
  		int countRemoved = 0;
  		groupFilterPatternErrorIndicatorLabel.setText("");
  		for (int selectedRowIndex : selectedRowIndices) {
  			int removeIndex = selectedRowIndex - countRemoved++;
                         groupFilterTableModel.remove(removeIndex);
  		}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        try {
        	 	ReportUI reportUI = new ReportUI();
        	 	reportUI.startReportUI();
            } catch (InterruptedException e) {
                   e.printStackTrace();
            } catch (InvocationTargetException e) {
                   e.printStackTrace();
            }
       
        
    }
    public void startReportUI() throws InterruptedException, InvocationTargetException {
	
		setup();
		createAndDisply();
		
	}

   protected void setup() {
        try {
                
                reportNames = MultiServerCommandExecutor.get().execute(new GetReportsCommand(null));
                reportnameListModel.addAll(reportNames);
                
				final JComboBox functioncomboBox = new JComboBox();
				final ComboBoxModel<FunctionConfig<?>> functionComboBoxModel = new ComboBoxModel<FunctionConfig<?>>();
				functioncomboBox.setModel(functionComboBoxModel);
				ComboBoxCellEditor editor = new ComboBoxCellEditor(functioncomboBox){
					private static final long serialVersionUID = 1L;

					@SuppressWarnings("unchecked")
					@Override
					public Component getTableCellEditorComponent(JTable table,
							Object value, boolean isSelected, int row,
							int column) {
						Component tableCellEditorComponent = super.getTableCellEditorComponent(table, value, isSelected, row, column);
						if(column == 1){
							functionComboBoxModel.removeAll();
							functionComboBoxModel.add(null);
							functioncomboBox.setSelectedItem(null);
							ColumnConfig<?, ?> columnConfig = selectedColumnsTableModel.getRow(row).getColumnConfig();
							List<?> functions = columnConfig.getFunctions();
							functionComboBoxModel.addAll((List<FunctionConfig<?>>)functions);
							return functioncomboBox;
						}
						return tableCellEditorComponent;
					}
					
				};
				selectedColumnsTable.setDefaultEditor(FunctionConfig.class, editor);
				filterTableSetup();
				groupFilterTableSetup();
		        filterTableModel.addTableModelListener(filterTableModelListener());
		        groupFilterTableModel.addTableModelListener(groupFilterTableModelListener());
		        selectedColumnsTableModel.addTableModelListener(selectedColumnsTableModelListener());

				
        } catch (CommandException e) {
            e.printStackTrace();
        }
	}
   protected void filterTableSetup(){
	   
	   	filterColumnConfigComboBox.setModel(filterColumnConfigComboBoxModel);
		ComboBoxCellEditor filterTableEditor = new ComboBoxCellEditor(filterColumnConfigComboBox){
			
			private static final long serialVersionUID = 1L;

			@Override
			public Component getTableCellEditorComponent(JTable table,Object value, boolean isSelected, int row,int column) {
				
				Component tableCellEditorComponent = super.getTableCellEditorComponent(table, value, isSelected, row, column);
				if(column==0) return filterColumnConfigComboBox;
				return tableCellEditorComponent;
			}
			
		};
		filterTable.setDefaultEditor(ColumnConfig.class, filterTableEditor);
		
		final JComboBox filterConditionConfigComboBox = new JComboBox();
		final ComboBoxModel<ConditionConfig<?>> conditionConfigComboBoxModel = new ComboBoxModel<ConditionConfig<?>>();
		filterConditionConfigComboBox.setModel(conditionConfigComboBoxModel);
		ComboBoxCellEditor conditionConfigComboBoxTableEditor = new ComboBoxCellEditor(filterConditionConfigComboBox){
			
			private static final long serialVersionUID = 1L;

			@SuppressWarnings("unchecked")
			@Override
			public Component getTableCellEditorComponent(JTable table,Object value, boolean isSelected, int row,int column) {
				
				Component tableCellEditorComponent = super.getTableCellEditorComponent(table, value, isSelected, row, column);
				if(column==1){
					conditionConfigComboBoxModel.removeAll();
					//conditionConfigComboBox.setSelectedItem(null);
					ColumnConfig<?, ?> columnConfig = filterTableModel.getRow(row).getColumnConfig();
					if(!((columnConfig==null)||(columnConfig.getConditions()==null))){
						List<?> conditions = columnConfig.getConditions();
						conditionConfigComboBoxModel.addAll((List<ConditionConfig<?>>)conditions);
					}
					else conditionConfigComboBoxModel.add(null);
					return filterConditionConfigComboBox;
				}
				return tableCellEditorComponent;
			}
			
		};
		filterTable.setDefaultEditor(ConditionConfig.class, conditionConfigComboBoxTableEditor);
		
   }
   
 protected void groupFilterTableSetup(){
	   
	   ComboBoxCellEditor groupFilterColumnConfigComboBoxTableEditor = new ComboBoxCellEditor(groupFilterColumnConfigComboBox){
			private static final long serialVersionUID = 1L;
			@Override
			public Component getTableCellEditorComponent(JTable table,Object value, boolean isSelected, int row,int column) {
				
				if(column==0) {
					groupFilterColumnConfigComboBox.setModel(groupFilterColumnConfigComboBoxModel);
					return groupFilterColumnConfigComboBox;
					}
				else if(column==3) {
					groupFilterColumnConfigComboBox.setModel(groupLevelComboBoxModel);
					return groupFilterColumnConfigComboBox;
				}
				Component tableCellEditorComponent = super.getTableCellEditorComponent(table, value, isSelected, row, column);
				return tableCellEditorComponent;
			}
			
		};
		groupFilterTable.setDefaultEditor(ColumnConfig.class, groupFilterColumnConfigComboBoxTableEditor);
		
		final JComboBox conditionConfigComboBox = new JComboBox();
		final ComboBoxModel<ConditionConfig<?>> conditionConfigComboBoxModel = new ComboBoxModel<ConditionConfig<?>>();
		conditionConfigComboBox.setModel(conditionConfigComboBoxModel);
		ComboBoxCellEditor conditionConfigComboBoxTableEditor = new ComboBoxCellEditor(conditionConfigComboBox){
			
			private static final long serialVersionUID = 1L;

			@SuppressWarnings("unchecked")
			@Override
			public Component getTableCellEditorComponent(JTable table,Object value, boolean isSelected, int row,int column) {
				
				Component tableCellEditorComponent = super.getTableCellEditorComponent(table, value, isSelected, row, column);
				if(column==1){
					conditionConfigComboBoxModel.removeAll();
					//conditionConfigComboBox.setSelectedItem(null);
					ColumnConfig<?, ?> columnConfig = groupFilterTableModel.getRow(row).getColumnConfig();
					List<?> conditions = columnConfig.getConditions();
					conditionConfigComboBoxModel.addAll((List<ConditionConfig<?>>)conditions);
					return conditionConfigComboBox;
				}
				return tableCellEditorComponent;
			}
			
		};
		groupFilterTable.setDefaultEditor(ConditionConfig.class, conditionConfigComboBoxTableEditor);

		ComboBoxCellEditor marketLevelConfigComboBoxTableEditor = new ComboBoxCellEditor(groupLevelConfigComboBox){
			
			private static final long serialVersionUID = 1L;

			@Override
			public Component getTableCellEditorComponent(JTable table,Object value, boolean isSelected, int row,int column) {
				if(column==4) return groupFilterColumnConfigComboBox;
				Component tableCellEditorComponent = super.getTableCellEditorComponent(table, value, isSelected, row, column);
				return tableCellEditorComponent;
			}
			
		};
		
		groupFilterTable.setDefaultEditor(String.class, marketLevelConfigComboBoxTableEditor);
				
   }
 
	protected void createAndDisply(){
    
    try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton addSelectedColumnButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JList columnsList;
    private javax.swing.JButton filterAddButton;
    private javax.swing.JLabel filterConditionLabel;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JLabel filterPatternErrorIndicatorLabel;
    private javax.swing.JButton filterRemoveButton;
    private javax.swing.JTable filterTable;
    private javax.swing.JButton generateReportButton;
    private javax.swing.JButton groupFilterAddButton;
    private javax.swing.JLabel groupFilterConditionLabel;
    private javax.swing.JLabel groupFilterPatternErrorIndicatorLabel;
    private javax.swing.JButton groupFilterRemoveButton;
    private javax.swing.JTable groupFilterTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton removeSelectedColumnButton;
    private javax.swing.JList reportnameList;
    private javax.swing.JButton saveQueryButton;
    private javax.swing.JLabel selectReportLabel;
    private javax.swing.JLabel selectSubLabel;
    private javax.swing.JTable selectedColumnsTable;
    private javax.swing.JComboBox subComboBox;
    private javax.swing.JPanel subPanel;
    private javax.swing.JSplitPane verticalSplitPane;
    // End of variables declaration
}
